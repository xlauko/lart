#!/bin/bash

LART_INTERFACE="@PROJECT_BINARY_DIR@/include/"
RUNTIME="@LART_RUNTIME_DIR@"
PASS="@CMAKE_CURRENT_BINARY_DIR@/liblart_module.so"
LIBCXX=LARTCC_LIBCXX_PATH

if [[ -v LARTCC_REGULAR_LIBCXX ]]; then
    STDLIB_CFLAGS=
    STDLIB_LDFLAGS=
elif [[ ! -v $LIBCXX ]]; then
    >&2 echo "Please set $LIBCXX to the directory containing libc++ or confirm usage of the system library by setting LARTCC_REGULAR_LIBCXX!"
    exit 255
else
    # It is important that the resulting binaries load libstdc++ before libc++;
    # otherwise our backend calls the instrumented library in cases where
    # exported names collide.
    STDLIB_CFLAGS="-isystem ${!LIBCXX}/include/c++/ostdlib++"
    STDLIB_LDFLAGS="-L${!LIBCXX}/lib -Wl,-rpath,${!LIBCXX}/lib -lstdc++ -lc++ -stdlib=libc++"
fi

exec @CLANGPP_BINARY@                           \
     -Xclang -load -Xclang "$PASS"              \
     $STDLIB_CFLAGS                             \
     "$@"                                       \
     $STDLIB_LDFLAGS                            \
     -I"$LART_INTERFACE"                        \
     -L"$RUNTIME"                               \
     -llart-runtime                             \
     -Wl,-rpath,"$RUNTIME"                      \
     -Qunused-arguments
